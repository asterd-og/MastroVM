str wd "Hello Mastro!"
str2 wd " From allocator B)"

mov regB 0x0000 ; lastAddr

mov regD 50     ; Size
call alloc

pop regE        ; Address allocated is now in regE

mov regG str
mov regH regE
call strcopy

mov regD 0x3a2f
mov regJ regE
call print

mov regD 50     ; Size
call alloc

pop regE        ; Address allocated is now in regE

mov regG str2
mov regH regE
call strcopy

mov regJ regE
call print

.:
    jmp .

alloc:
    pop regC    ; Store the old address

    push regB
    add regB regD ; regD = size
    add regB 1    ; Null terminator on strings

    push regC   ; Restore the return address
    ret

strcopy:
    mov regI [regG]  ; regG is string A
    cmp regI 0
    je strcopy.done
    mov [regH] regI  ; regH is string B (copy from A to B)
    add regG 1
    add regH 1
    jmp strcopy
strcopy.done:
    ret

print:
    mov regC [regJ]     ; Mov char from address regJ to regC
    cmp regC 0          ; Compare if regC is 0
    je print.done       ; If it is, return
    mov [regD] regC     ; Else, mov that char to the TVO address
    add regD 1          ; Increment TVO address
    add regJ 1          ; Increment string pointer address
    jmp print           ; Loop

print.done:
    ret                 ; Return from the subroutine